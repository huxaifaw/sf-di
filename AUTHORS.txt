Dependency Injection for 5 years old.
"I want something to drink with lunch" and then we will make sure you have something when you sit down to eat.

Dependency Injection is where a needed dependency is injected by another object.
The class being injected has no responsibility in instantiating the object being injected.

DI is preferred via Interfaces because it allows to decide implementation at runtime.

Inversion of Control is a technique to allow dependencies to be injected at runtime. Dependencies are not predetermined.

DI is how you write your classes and IoC is runtime environment which decides which objects should be injected. 

* Dependency Inversion addresses abstractions. Whereas, Dependency Injection refers to injection of dependencies into classes.

Favor using Constructor Injection over Setter Injection.
Use final properties for injected components.

Spring Managed Components

@Controller
@Service
@Autowired tells spring to inject an instance of the annotated class
@Qualifier tells spring which class is to be injected in case of multiple implementations of an interface
@Primary tells spring to use this class for injection in case of multiple implementations. Primary Bean will be injected if no Qualifier is defined

@Profile Profiles allows you to control your spring application in different run time environments
Services with same name gives conflict in dependency injection. Spring active profiles solves this by activating one of the many profiles.
Default Profile is selected if no active profile is found

-- Spring Bean Life Cycle --
Instantiate -> Populate Properties -> BeanNameAware -> BeanFactoryAware -> ApplicationContextAware -> PreInitialization (BeanPostProcessors) -> Custom Initialization ->  PostInitialization (BeanPostProcessors -> Bean Ready To Use
Container Shutdown -> Disposable Bean's destroy -> Custom Destroy Method -> Terminated

-- Callback Interfaces --
Spring has two interfaces you can implement for callback events
-> InitializingBean.afterPropertiesSet() - called after properties are set
-> DisposableBean.destory() -> called during bean destruction

-- Spring Bean Life Cycle Annotations --
@PostConstruct annotated methods are called after the bean has been constructed but before it is returned to the requesting object.
@PreDestroy annotated methods are called just before bean is destroyed by the container.

-- Bean PostProcessors --
They give you a means to tap into the Spring Context Life Cycle and interact with beans as they are processed.
Implement interface -> BeanPostProcessor
  -postProcessBeforeInitialization
  -postProcessAfterInitialization
Never used in reality.

Spring has over 14 'Aware' Interfaces. They are used to interact with Spring infrastructure.

Component Scanners are used to scan for spring beans in a spring boot application. The beans found are brought into the spring context.
By default, component scans are performed in the base package (the package in which SpringBootApplication lies).
To perform component scans in other packages, @ComponentScan annotation is used on top of @SpringBootApplication.

ComponentScans are expensive when you have large number of files of Spring Beans.
In this case, @Configuration annotation is used to define Spring Beans and brought them in Spring Context.
The name of the function defined as Bean becomes bean name.
        @Bean
        ConstructorGreetingServiceImpl constructorGreetingService() {
            return new ConstructorGreetingServiceImpl();
        }
        -- here 'constructorGreetingService' is the name of the bean.

        The name can be overridden using @Bean("beanName").
